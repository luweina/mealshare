{"ast":null,"code":"var _jsxFileName = \"/Users/danielna/Desktop/home chef/frontend/src/screens/PlaceOrderScreen.js\";\nimport React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport CheckoutSteps from '../components/CheckoutSteps'; // import { createOrder } from '../actions/orderActions'\n// import { ORDER_CREATE_RESET } from '../constants/orderConstants'\n\nconst PlaceOrderScreen = ({\n  history\n}) => {\n  //   const dispatch = useDispatch()\n  const cart = useSelector(state => state.cart); //   Calculate prices\n  //   const addDecimals = (num) => {\n  //     return (Math.round(num * 100) / 100).toFixed(2)\n  //   }\n  //   cart.itemsPrice = addDecimals(\n  //     cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0)\n  //   )\n  //   cart.shippingPrice = addDecimals(cart.itemsPrice > 100 ? 0 : 100)\n  //   cart.taxPrice = addDecimals(Number((0.15 * cart.itemsPrice).toFixed(2)))\n  //   cart.totalPrice = (\n  //     Number(cart.itemsPrice) +\n  //     Number(cart.shippingPrice) +\n  //     Number(cart.taxPrice)\n  //   ).toFixed(2)\n  //   const orderCreate = useSelector((state) => state.orderCreate)\n  //   const { order, success, error } = orderCreate\n  //   useEffect(() => {\n  //     if (success) {\n  //       history.push(`/order/${order._id}`)\n  //       dispatch({ type: ORDER_CREATE_RESET })\n  //     }\n  //     // eslint-disable-next-line\n  //   }, [history, success])\n  //   const placeOrderHandler = () => {\n  //     dispatch(\n  //       createOrder({\n  //         orderItems: cart.cartItems,\n  //         shippingAddress: cart.shippingAddress,\n  //         paymentMethod: cart.paymentMethod,\n  //         itemsPrice: cart.itemsPrice,\n  //         shippingPrice: cart.shippingPrice,\n  //         taxPrice: cart.taxPrice,\n  //         totalPrice: cart.totalPrice,\n  //       })\n  //     )\n  //   }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CheckoutSteps, {\n    step1: true,\n    step2: true,\n    step3: true,\n    step4: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ListGroup, {\n    variant: \"flush\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ListGroup.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  }, \"Shipping\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, \"Address:\"), cart.shippingAddress.address, \", \", cart.shippingAddress.city, ' ', cart.shippingAddress.postalCode, \",\", ' ', cart.shippingAddress.country))))));\n};\n\nexport default PlaceOrderScreen;","map":{"version":3,"sources":["/Users/danielna/Desktop/home chef/frontend/src/screens/PlaceOrderScreen.js"],"names":["React","useEffect","Link","Button","Row","Col","ListGroup","Image","Card","useDispatch","useSelector","Message","CheckoutSteps","PlaceOrderScreen","history","cart","state","shippingAddress","address","city","postalCode","country"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,GAAtB,EAA2BC,SAA3B,EAAsCC,KAAtC,EAA6CC,IAA7C,QAAyD,iBAAzD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,aAAP,MAA0B,6BAA1B,C,CACA;AACA;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAC1C;AAEE,QAAMC,IAAI,GAAGL,WAAW,CAAEM,KAAD,IAAWA,KAAK,CAACD,IAAlB,CAAxB,CAHwC,CAKxC;AACF;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,sBACE,uDACE,oBAAC,aAAD;AAAe,IAAA,KAAK,MAApB;AAAqB,IAAA,KAAK,MAA1B;AAA2B,IAAA,KAAK,MAAhC;AAAiC,IAAA,KAAK,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD,CAAW,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEGA,IAAI,CAACE,eAAL,CAAqBC,OAFxB,QAEmCH,IAAI,CAACE,eAAL,CAAqBE,IAFxD,EAE8D,GAF9D,EAGGJ,IAAI,CAACE,eAAL,CAAqBG,UAHxB,OAGqC,GAHrC,EAIGL,IAAI,CAACE,eAAL,CAAqBI,OAJxB,CAFF,CADF,CADF,CADF,CAFF,CADF;AA+GD,CA7JD;;AA+JA,eAAeR,gBAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Message from '../components/Message'\nimport CheckoutSteps from '../components/CheckoutSteps'\n// import { createOrder } from '../actions/orderActions'\n// import { ORDER_CREATE_RESET } from '../constants/orderConstants'\n\nconst PlaceOrderScreen = ({ history }) => {\n//   const dispatch = useDispatch()\n\n  const cart = useSelector((state) => state.cart)\n\n  //   Calculate prices\n//   const addDecimals = (num) => {\n//     return (Math.round(num * 100) / 100).toFixed(2)\n//   }\n\n//   cart.itemsPrice = addDecimals(\n//     cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0)\n//   )\n//   cart.shippingPrice = addDecimals(cart.itemsPrice > 100 ? 0 : 100)\n//   cart.taxPrice = addDecimals(Number((0.15 * cart.itemsPrice).toFixed(2)))\n//   cart.totalPrice = (\n//     Number(cart.itemsPrice) +\n//     Number(cart.shippingPrice) +\n//     Number(cart.taxPrice)\n//   ).toFixed(2)\n\n//   const orderCreate = useSelector((state) => state.orderCreate)\n//   const { order, success, error } = orderCreate\n\n//   useEffect(() => {\n//     if (success) {\n//       history.push(`/order/${order._id}`)\n//       dispatch({ type: ORDER_CREATE_RESET })\n//     }\n//     // eslint-disable-next-line\n//   }, [history, success])\n\n//   const placeOrderHandler = () => {\n//     dispatch(\n//       createOrder({\n//         orderItems: cart.cartItems,\n//         shippingAddress: cart.shippingAddress,\n//         paymentMethod: cart.paymentMethod,\n//         itemsPrice: cart.itemsPrice,\n//         shippingPrice: cart.shippingPrice,\n//         taxPrice: cart.taxPrice,\n//         totalPrice: cart.totalPrice,\n//       })\n//     )\n//   }\n\n  return (\n    <>\n      <CheckoutSteps step1 step2 step3 step4 />\n      <Row>\n        <Col md={8}>\n          <ListGroup variant='flush'>\n            <ListGroup.Item>\n              <h2>Shipping</h2>\n              <p>\n                <strong>Address:</strong>\n                {cart.shippingAddress.address}, {cart.shippingAddress.city}{' '}\n                {cart.shippingAddress.postalCode},{' '}\n                {cart.shippingAddress.country}\n              </p>\n            </ListGroup.Item>\n\n\n            {/* <ListGroup.Item>\n              <h2>Payment Method</h2>\n              <strong>Method: </strong>\n              {cart.paymentMethod}\n            </ListGroup.Item>\n\n            {/* <ListGroup.Item>\n              <h2>Payment Method</h2>\n              <strong>Method: </strong>\n              {cart.paymentMethod}\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h2>Order Items</h2>\n              {cart.cartItems.length === 0 ? (\n                <Message>Your cart is empty</Message>\n              ) : (\n                <ListGroup variant='flush'>\n                  {cart.cartItems.map((item, index) => (\n                    <ListGroup.Item key={index}>\n                      <Row>\n                        <Col md={1}>\n                          <Image\n                            src={item.image}\n                            alt={item.name}\n                            fluid\n                            rounded\n                          />\n                        </Col>\n                        <Col>\n                          <Link to={`/product/${item.product}`}>\n                            {item.name}\n                          </Link>\n                        </Col>\n                        <Col md={4}>\n                          {item.qty} x ${item.price} = ${item.qty * item.price}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n              )}\n            </ListGroup.Item>\n          </ListGroup>\n        </Col>\n        <Col md={4}>\n          <Card>\n            <ListGroup variant='flush'>\n              <ListGroup.Item>\n                <h2>Order Summary</h2>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Items</Col>\n                  <Col>${cart.itemsPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Shipping</Col>\n                  <Col>${cart.shippingPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Tax</Col>\n                  <Col>${cart.taxPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Total</Col>\n                  <Col>${cart.totalPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                {error && <Message variant='danger'>{error}</Message>}\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Button\n                  type='button'\n                  className='btn-block'\n                  disabled={cart.cartItems === 0}\n                  onClick={placeOrderHandler}\n                >\n                  Place Order\n                </Button>\n              </ListGroup.Item> */}\n            </ListGroup>\n          {/* </Card> */}\n        </Col>\n      </Row>\n    </>\n  )\n}\n\nexport default PlaceOrderScreen"]},"metadata":{},"sourceType":"module"}