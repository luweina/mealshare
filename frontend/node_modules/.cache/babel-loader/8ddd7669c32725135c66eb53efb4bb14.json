{"ast":null,"code":"import axios from 'axios';\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants';\nimport { ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_CREATE_FAIL //   ORDER_DETAILS_FAIL,\n//   ORDER_DETAILS_SUCCESS,\n//   ORDER_DETAILS_REQUEST,\n//   ORDER_PAY_FAIL,\n//   ORDER_PAY_SUCCESS,\n//   ORDER_PAY_REQUEST,\n//   ORDER_LIST_MY_REQUEST,\n//   ORDER_LIST_MY_SUCCESS,\n//   ORDER_LIST_MY_FAIL,\n//   ORDER_LIST_FAIL,\n//   ORDER_LIST_SUCCESS,\n//   ORDER_LIST_REQUEST,\n//   ORDER_DELIVER_FAIL,\n//   ORDER_DELIVER_SUCCESS,\n//   ORDER_DELIVER_REQUEST,\n} from '../constants/orderConstants'; // import { logout } from './userActions'\n\nexport const createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/orders`, order, config);\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: CART_CLEAR_ITEMS,\n      payload: data\n    });\n    localStorage.removeItem('cartItems');\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message; //   if (message === 'Not authorized, token failed') {\n    //     dispatch(logout())\n    //   }\n\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/danielna/Desktop/home chef/frontend/src/actions/orderActions.js"],"names":["axios","CART_CLEAR_ITEMS","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL","createOrder","order","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","data","post","payload","localStorage","removeItem","error","message","response"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AACA,SACEC,oBADF,EAEEC,oBAFF,EAGEC,iBAHF,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA,OAmBO,6BAnBP,C,CAoBA;;AAEA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAW,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAChE,MAAI;AACFD,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEP;AADC,KAAD,CAAR;AAIA,UAAM;AACJQ,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADP,QAEFH,QAAQ,EAFZ;AAIA,UAAMI,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAG,UAASH,QAAQ,CAACI,KAAM;AAFjC;AADI,KAAf;AAOA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMhB,KAAK,CAACiB,IAAN,CAAY,aAAZ,EAA0BX,KAA1B,EAAiCM,MAAjC,CAAvB;AAEAL,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEN,oBADC;AAEPe,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAIAT,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAER,gBADC;AAEPiB,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAIAG,IAAAA,YAAY,CAACC,UAAb,CAAwB,WAAxB;AACD,GA3BD,CA2BE,OAAOC,KAAP,EAAc;AACd,UAAMC,OAAO,GACXD,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeP,IAAf,CAAoBM,OAAtC,GACID,KAAK,CAACE,QAAN,CAAeP,IAAf,CAAoBM,OADxB,GAEID,KAAK,CAACC,OAHZ,CADc,CAKhB;AACA;AACA;;AACEf,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEL,iBADC;AAEPc,MAAAA,OAAO,EAAEI;AAFF,KAAD,CAAR;AAID;AACF,CAzCI","sourcesContent":["import axios from 'axios'\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants'\nimport {\n  ORDER_CREATE_REQUEST,\n  ORDER_CREATE_SUCCESS,\n  ORDER_CREATE_FAIL,\n//   ORDER_DETAILS_FAIL,\n//   ORDER_DETAILS_SUCCESS,\n//   ORDER_DETAILS_REQUEST,\n//   ORDER_PAY_FAIL,\n//   ORDER_PAY_SUCCESS,\n//   ORDER_PAY_REQUEST,\n//   ORDER_LIST_MY_REQUEST,\n//   ORDER_LIST_MY_SUCCESS,\n//   ORDER_LIST_MY_FAIL,\n//   ORDER_LIST_FAIL,\n//   ORDER_LIST_SUCCESS,\n//   ORDER_LIST_REQUEST,\n//   ORDER_DELIVER_FAIL,\n//   ORDER_DELIVER_SUCCESS,\n//   ORDER_DELIVER_REQUEST,\n} from '../constants/orderConstants'\n// import { logout } from './userActions'\n\nexport const createOrder = (order) => async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: ORDER_CREATE_REQUEST,\n      })\n\n      const {\n        userLogin: { userInfo },\n      } = getState()\n\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${userInfo.token}`,\n        },\n      }\n\n      const { data } = await axios.post(`/api/orders`, order, config)\n\n      dispatch({\n        type: ORDER_CREATE_SUCCESS,\n        payload: data,\n      })\n      dispatch({\n        type: CART_CLEAR_ITEMS,\n        payload: data,\n      })\n      localStorage.removeItem('cartItems')\n    } catch (error) {\n      const message =\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message\n    //   if (message === 'Not authorized, token failed') {\n    //     dispatch(logout())\n    //   }\n      dispatch({\n        type: ORDER_CREATE_FAIL,\n        payload: message,\n      })\n    }\n  }"]},"metadata":{},"sourceType":"module"}